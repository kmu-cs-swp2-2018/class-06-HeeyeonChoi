class Hangman:
    #  데이터 멤버 : 행맨의 각 상태를 나타내는 그림을 문자열로 저장
    # text - 리스트 타입
    text = [

'''\
   ____
  |    |
  |    o
  |   /|\\
  |    |
  |   / \\
 _|_
|   |______
|          |
|__________|\
''',

'''\
   ____
  |    |
  |    o
  |   /|\\
  |    |
  |   /
 _|_
|   |______
|          |
|__________|\
''',

'''\
   ____
  |    |
  |    o
  |   /|\\
  |    |
  |
 _|_
|   |______
|          |
|__________|\
''',

'''\
   ____
  |    |
  |    o
  |   /|
  |    |
  |
 _|_
|   |______
|          |
|__________|\
''',

'''\
   ____
  |    |
  |    o
  |    |
  |    |
  |
 _|_
|   |______
|          |
|__________|\
''',

'''\
   ____
  |    |
  |    o
  |
  |
  |
 _|_
|   |______
|          |
|__________|\
''',

'''\
   ____
  |    |
  |
  |
  |
  |
 _|_
|   |______
|          |
|__________|\
''',

    ]

    #  목숨의 초기 개수를 알아냄. 단어의 글자수 만큼 목숨을 생성.
    # text 리스트의 길이를 이용해서 목숨 개수를 계산
    def __init__(self):
        self.remain = len(self.text) - 1

    def getLives(self):
        return self.remain

    def decreaseLife(self):
        self.remain -= 1


    # 남은 목숨 개수에 해당하는 그림을 문자열로 얻어냄.
    # 리스트 text에 대한 인덱싱을 통하여 알맞은 그림을 찾아 반환.
    def get(self, life):
        return self.text[life]

    def currentShape(self):
        return self.text[self.getLives()]